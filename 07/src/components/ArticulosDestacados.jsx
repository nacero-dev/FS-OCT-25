import React from "react";
import "./ArticulosDestacados.css";
import ArticuloCard from "./ArticuloCard";

const ArticulosDestacados = ({ articles }) => {
  /* ver abajo */
  const articulosFiltrados = articles.filter(
    (articulo) => articulo.destacado === true
  );

  return (
    <div className="articulos-destacados">
      <h2 className="articulos-destacados__titulo">Art√≠culos Destacados</h2>

      {articulosFiltrados.length === 0 ? (
        <p className="articulos-destacados__mensaje">
          No hay art√≠culos destacados üìÑ
        </p>
      ) : 
      
      
      // (
      //   <ul className="articulos-destacados__lista">
      //     {articulosFiltrados.map((articulo, index) => (
      //       <li key={index} className="articulos-destacados__item">
      //         <h3 className="articulos-destacados__nombre">{articulo.titulo}</h3>
      //         <p className="articulos-destacados__contenido">
      //           {articulo.contenido}
      //         </p>
      //       </li>
      //     ))}
      //   </ul>
      // )
      
      
      (
        <div className="articulos-destacados__lista">
          {articulosFiltrados.map((articulo, index) => (
            <ArticuloCard
              key={index}
              titulo={articulo.titulo}
              contenido={articulo.contenido}
            />
          ))}
        </div>
      )
      
      
      
      }
    </div>
  );
};

export default ArticulosDestacados;


/* 

const articulosFiltrados = articles.filter(
  (articulo) => articulo.destacado === true
);

.filter() es un m√©todo propio de los arrays de JavaScript.

articles.filter(...) ‚Üí Recorre cada elemento del array articles.

(articulo) ‚Üí Representa cada objeto individual dentro del array (igual que producto o tarea en tus ejemplos anteriores).

articulo.destacado === true ‚Üí Es la condici√≥n de filtrado.


(articulo) => articulo.destacado === true

Cuando usas un m√©todo como .filter(), este necesita una funci√≥n que le diga c√≥mo decidir qu√© elementos conservar.

Esa funci√≥n se llama funci√≥n callback (una funci√≥n que se pasa como argumento a otra funci√≥n).

üëâ En este caso, .filter() espera algo as√≠:

array.filter(funcionQueDevuelveTrueOFalse)

Por cada elemento del array, ejecuta esa funci√≥n callback y:

Si devuelve true, el elemento se queda.
Si devuelve false, el elemento se descarta

üß† 2. Estructura completa del callback

(articulo) => articulo.destacado === true

Esto es una funci√≥n flecha (arrow function).
La estructura general es:

(parametro) => expresi√≥n

(articulo) ‚Üí es el par√°metro.
Representa cada elemento del array que .filter() est√° procesando.

articulo.destacado === true ‚Üí es la expresi√≥n que se eval√∫a.
Devuelve true o false, y eso es lo que .filter() usa para decidir si incluye ese elemento en el nuevo array.

üîç 3. Qu√© hace .filter() con esa funci√≥n

Piensa que .filter() hace esto internamente:

for (let i = 0; i < articles.length; i++) {
  const articulo = articles[i];
  if (articulo.destacado === true) {
    // Lo incluye en el nuevo array
  }
}

La parte que t√∫ escribes como (articulo) => articulo.destacado === true
es la ‚Äúf√≥rmula‚Äù que .filter() usa en su if.

*/